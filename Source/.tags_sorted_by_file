Controller	GameChecker.cpp	/^namespace Controller {$/;"	n	file:
GameChecker	GameChecker.cpp	/^GameChecker::GameChecker() {$/;"	f	class:Controller::GameChecker
getName	GameChecker.cpp	/^string GameChecker::getName() {$/;"	f	class:Controller::GameChecker
makeDefaultConfig	GameChecker.cpp	/^void GameChecker::makeDefaultConfig() {$/;"	f	class:Controller::GameChecker
~GameChecker	GameChecker.cpp	/^GameChecker::~GameChecker() {$/;"	f	class:Controller::GameChecker
Controller	GameChecker.h	/^namespace Controller {$/;"	n
GAMECHECKER_H	GameChecker.h	2;"	d
GameChecker	GameChecker.h	/^class GameChecker {$/;"	c	namespace:Controller
Controller	GameController.cpp	/^namespace Controller {$/;"	n	file:
GameController	GameController.cpp	/^GameController::GameController() {$/;"	f	class:Controller::GameController
game	GameController.cpp	/^void GameController::game() {$/;"	f	class:Controller::GameController
init	GameController.cpp	/^void GameController::init(string name) {$/;"	f	class:Controller::GameController
loop	GameController.cpp	/^void GameController::loop() {$/;"	f	class:Controller::GameController
quit	GameController.cpp	/^void GameController::quit() {$/;"	f	class:Controller::GameController
~GameController	GameController.cpp	/^GameController::~GameController() {$/;"	f	class:Controller::GameController
Controller	GameController.h	/^namespace Controller {$/;"	n
GAMECONTROLLER_H	GameController.h	2;"	d
GameController	GameController.h	/^class GameController {$/;"	c	namespace:Controller
Model	GameController.h	/^namespace Model {$/;"	n
View	GameController.h	/^namespace View {$/;"	n
database	GameController.h	/^    Model::DatabaseController *database;$/;"	m	class:Controller::GameController
network	GameController.h	/^    Model::Network *network;$/;"	m	class:Controller::GameController
pool	GameController.h	/^    Model::NodePool *pool;$/;"	m	class:Controller::GameController
ui	GameController.h	/^    View::UserInterface *ui;$/;"	m	class:Controller::GameController
controller	Main.cpp	/^GameController controller;$/;"	v
main	Main.cpp	/^int main() {$/;"	f
DatabaseController	Model\Database.cpp	/^DatabaseController::DatabaseController(string name) {$/;"	f	class:Model::DatabaseController
Model	Model\Database.cpp	/^namespace Model {$/;"	n	file:
close	Model\Database.cpp	/^void DatabaseController::close() {$/;"	f	class:Model::DatabaseController
getAttribute	Model\Database.cpp	/^DatabaseAttribute DatabaseController::getAttribute() const {$/;"	f	class:Model::DatabaseController
getBlock	Model\Database.cpp	/^DatabaseBlock DatabaseController::getBlock(UuidType id) const {$/;"	f	class:Model::DatabaseController
getFileName	Model\Database.cpp	/^string DatabaseController::getFileName(string dir, string name, string suffix) const {$/;"	f	class:Model::DatabaseController
open	Model\Database.cpp	/^void DatabaseController::open(string name) {$/;"	f	class:Model::DatabaseController
setAttribute	Model\Database.cpp	/^void DatabaseController::setAttribute(DatabaseAttribute attr) {$/;"	f	class:Model::DatabaseController
setBlock	Model\Database.cpp	/^void DatabaseController::setBlock(UuidType id, DatabaseBlock block) {$/;"	f	class:Model::DatabaseController
~DatabaseController	Model\Database.cpp	/^DatabaseController::~DatabaseController() {$/;"	f	class:Model::DatabaseController
DATABASE_H	Model\Database.h	2;"	d
DatabaseAttribute	Model\Database.h	/^    DatabaseAttribute() : total(0), blockTotal(0), name("") {}$/;"	f	struct:Model::DatabaseAttribute
DatabaseAttribute	Model\Database.h	/^struct DatabaseAttribute {$/;"	s	namespace:Model
DatabaseBlock	Model\Database.h	/^    DatabaseBlock() : uuid(0) {}$/;"	f	struct:Model::DatabaseBlock
DatabaseBlock	Model\Database.h	/^    DatabaseBlock(UuidType id, const vector<string> &v) : uuid(id), data(v) {}$/;"	f	struct:Model::DatabaseBlock
DatabaseBlock	Model\Database.h	/^struct DatabaseBlock {$/;"	s	namespace:Model
DatabaseController	Model\Database.h	/^class DatabaseController {$/;"	c	namespace:Model
Model	Model\Database.h	/^namespace Model {$/;"	n
attribute	Model\Database.h	/^    DatabaseAttribute attribute;$/;"	m	class:Model::DatabaseController
blockTotal	Model\Database.h	/^    UuidType blockTotal;$/;"	m	struct:Model::DatabaseAttribute
data	Model\Database.h	/^    vector<string> data;$/;"	m	struct:Model::DatabaseBlock
getUuid	Model\Database.h	/^    UuidType getUuid() {$/;"	f	struct:Model::DatabaseBlock
name	Model\Database.h	/^    string name;$/;"	m	struct:Model::DatabaseAttribute
setUuid	Model\Database.h	/^    void setUuid(int id) {$/;"	f	struct:Model::DatabaseBlock
total	Model\Database.h	/^    UuidType total;$/;"	m	struct:Model::DatabaseAttribute
uuid	Model\Database.h	/^    UuidType uuid;$/;"	m	struct:Model::DatabaseBlock
~DatabaseAttribute	Model\Database.h	/^    ~DatabaseAttribute() {}$/;"	f	struct:Model::DatabaseAttribute
~DatabaseBlock	Model\Database.h	/^    ~DatabaseBlock() {}$/;"	f	struct:Model::DatabaseBlock
BranchEnum	Model\Definition.h	/^enum class BranchEnum {$/;"	c	namespace:Model
DEFINITION	Model\Definition.h	2;"	d
Model	Model\Definition.h	/^namespace Model {$/;"	n
No	Model\Definition.h	/^    No, Yes$/;"	m	class:Model::BranchEnum
NodeEnum	Model\Definition.h	/^enum class NodeEnum {$/;"	c	namespace:Model
Query	Model\Definition.h	/^    Query, Answer$/;"	m	class:Model::NodeEnum
AnswerNode	Model\ExtendedNode.cpp	/^AnswerNode::AnswerNode(string t) : LogicalNode(NodeEnum::Answer, t) {$/;"	f	class:Model::AnswerNode
Model	Model\ExtendedNode.cpp	/^namespace Model {$/;"	n	file:
QueryNode	Model\ExtendedNode.cpp	/^QueryNode::QueryNode(string t) : LogicalNode(NodeEnum::Query, t) {$/;"	f	class:Model::QueryNode
AnswerNode	Model\ExtendedNode.h	/^class AnswerNode : public LogicalNode {$/;"	c	namespace:Model
EXTENDED_NODE	Model\ExtendedNode.h	2;"	d
Model	Model\ExtendedNode.h	/^namespace Model {$/;"	n
QueryNode	Model\ExtendedNode.h	/^class QueryNode : public LogicalNode {$/;"	c	namespace:Model
branch	Model\ExtendedNode.h	/^    UuidType branch[2];$/;"	m	class:Model::QueryNode
noexcept	Model\ExtendedNode.h	/^    UuidType getBranch(BranchEnum b) const noexcept;$/;"	m	class:Model::QueryNode
noexcept	Model\ExtendedNode.h	/^    void setBranch(BranchEnum b, UuidType id) noexcept;$/;"	m	class:Model::QueryNode
noexcept	Model\ExtendedNode.h	/^    ~AnswerNode() noexcept;$/;"	m	class:Model::AnswerNode
noexcept	Model\ExtendedNode.h	/^    ~QueryNode() noexcept;$/;"	m	class:Model::QueryNode
Model	Model\LogicalNode.cpp	/^namespace Model {$/;"	n	file:
previous	Model\LogicalNode.cpp	/^    : uuid(LogicalNode::null), previous(LogicalNode::null) {$/;"	f	namespace:Model
LOGICAL_NODE	Model\LogicalNode.h	2;"	d
LogicalNode	Model\LogicalNode.h	/^class LogicalNode {$/;"	c	namespace:Model
Model	Model\LogicalNode.h	/^namespace Model {$/;"	n
noexcept	Model\LogicalNode.h	/^    LogicalNode(NodeEnum n, string t = "") noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    NodeEnum getType() const noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    UuidType getPrevious() const noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    UuidType getUuid() const noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    bool isEnd() const noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    string getText() const noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    virtual ~LogicalNode() noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    void setPrevious(UuidType id) noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    void setText(string t) noexcept;$/;"	m	class:Model::LogicalNode
noexcept	Model\LogicalNode.h	/^    void setUuid(UuidType id) noexcept;$/;"	m	class:Model::LogicalNode
null	Model\LogicalNode.h	/^    static constexpr UuidType null = 0;$/;"	m	class:Model::LogicalNode
previous	Model\LogicalNode.h	/^    UuidType previous;$/;"	m	class:Model::LogicalNode
text	Model\LogicalNode.h	/^    string text;$/;"	m	class:Model::LogicalNode
type	Model\LogicalNode.h	/^    NodeEnum type;$/;"	m	class:Model::LogicalNode
uuid	Model\LogicalNode.h	/^    UuidType uuid;$/;"	m	class:Model::LogicalNode
Model	Model\Network.cpp	/^namespace Model {$/;"	n	file:
Network	Model\Network.cpp	/^Network::Network(NodePool *p) : pool(p), current(origin) {$/;"	f	class:Model::Network
addNode	Model\Network.cpp	/^void Network::addNode(LogicalNode *p) {$/;"	f	class:Model::Network
deref	Model\Network.cpp	/^LogicalNode *Network::deref(UuidType id) {$/;"	f	class:Model::Network
exist	Model\Network.cpp	/^bool Network::exist(UuidType id) const {$/;"	f	class:Model::Network
extend	Model\Network.cpp	/^void Network::extend(string query, string answer, BranchEnum which) {$/;"	f	class:Model::Network
getCurrentUuid	Model\Network.cpp	/^UuidType Network::getCurrentUuid() const {$/;"	f	class:Model::Network
getText	Model\Network.cpp	/^string Network::getText() {$/;"	f	class:Model::Network
goNext	Model\Network.cpp	/^void Network::goNext(BranchEnum b) {$/;"	f	class:Model::Network
goPrevious	Model\Network.cpp	/^void Network::goPrevious() {$/;"	f	class:Model::Network
isEnd	Model\Network.cpp	/^bool Network::isEnd() {$/;"	f	class:Model::Network
isValid	Model\Network.cpp	/^bool Network::isValid() {$/;"	f	class:Model::Network
load	Model\Network.cpp	/^void Network::load(UuidType id) {$/;"	f	class:Model::Network
next	Model\Network.cpp	/^UuidType Network::next(UuidType now, BranchEnum b) {$/;"	f	class:Model::Network
reset	Model\Network.cpp	/^void Network::reset() {$/;"	f	class:Model::Network
setCurrentUuid	Model\Network.cpp	/^void Network::setCurrentUuid(UuidType id) {$/;"	f	class:Model::Network
setNodePool	Model\Network.cpp	/^void Network::setNodePool(NodePool *p) {$/;"	f	class:Model::Network
size	Model\Network.cpp	/^UuidType Network::size() const {$/;"	f	class:Model::Network
Model	Model\Network.h	/^namespace Model {$/;"	n
NETWORK_H	Model\Network.h	2;"	d
Network	Model\Network.h	/^class Network {$/;"	c	namespace:Model
current	Model\Network.h	/^    UuidType current;$/;"	m	class:Model::Network
nodes	Model\Network.h	/^    unordered_map<UuidType, LogicalNode *> nodes;$/;"	m	class:Model::Network
noexcept	Model\Network.h	/^    BranchEnum other(BranchEnum b) const noexcept;$/;"	m	class:Model::Network
noexcept	Model\Network.h	/^    ~Network() noexcept;$/;"	m	class:Model::Network
origin	Model\Network.h	/^    static constexpr UuidType origin = 1;$/;"	m	class:Model::Network
pool	Model\Network.h	/^    NodePool *pool;$/;"	m	class:Model::Network
DataBlock	Model\NodePool.cpp	/^DataBlock::DataBlock() : size(0) {$/;"	f	class:Model::DataBlock
Model	Model\NodePool.cpp	/^namespace Model {$/;"	n	file:
NodePool	Model\NodePool.cpp	/^NodePool::NodePool(DatabaseController *p) : database(p) {$/;"	f	class:Model::NodePool
deserialize	Model\NodePool.cpp	/^void DataBlock::deserialize(const vector<string> &data) {$/;"	f	class:Model::DataBlock
get	Model\NodePool.cpp	/^LogicalNode *DataBlock::get(UuidType id) const {$/;"	f	class:Model::DataBlock
getSize	Model\NodePool.cpp	/^UuidType DataBlock::getSize() const {$/;"	f	class:Model::DataBlock
load	Model\NodePool.cpp	/^void NodePool::load(function<void(LogicalNode *)> f, UuidType id) {$/;"	f	class:Model::NodePool
newAnswerNode	Model\NodePool.cpp	/^AnswerNode *DataBlock::newAnswerNode(string text, UuidType id) {$/;"	f	class:Model::DataBlock
newAnswerNode	Model\NodePool.cpp	/^AnswerNode *NodePool::newAnswerNode(string text) {$/;"	f	class:Model::NodePool
newDataBlock	Model\NodePool.cpp	/^UuidType NodePool::newDataBlock() {$/;"	f	class:Model::NodePool
newQueryNode	Model\NodePool.cpp	/^QueryNode *DataBlock::newQueryNode(string text, UuidType id) {$/;"	f	class:Model::DataBlock
newQueryNode	Model\NodePool.cpp	/^QueryNode *NodePool::newQueryNode(string text) {$/;"	f	class:Model::NodePool
save	Model\NodePool.cpp	/^void NodePool::save() {$/;"	f	class:Model::NodePool
serialize	Model\NodePool.cpp	/^vector<string> DataBlock::serialize() const {$/;"	f	class:Model::DataBlock
setDatabaseController	Model\NodePool.cpp	/^void NodePool::setDatabaseController(DatabaseController *p) {$/;"	f	class:Model::NodePool
~DataBlock	Model\NodePool.cpp	/^DataBlock::~DataBlock() {$/;"	f	class:Model::DataBlock
~NodePool	Model\NodePool.cpp	/^NodePool::~NodePool() {$/;"	f	class:Model::NodePool
BlockSize	Model\NodePool.h	/^    static constexpr UuidType BlockSize = 1000;$/;"	m	class:Model::DataBlock
DataBlock	Model\NodePool.h	/^class DataBlock {$/;"	c	namespace:Model
Model	Model\NodePool.h	/^namespace Model {$/;"	n
NODEPOOL_H	Model\NodePool.h	2;"	d
NodePool	Model\NodePool.h	/^class NodePool {$/;"	c	namespace:Model
blockTotal	Model\NodePool.h	/^    UuidType blockTotal;$/;"	m	class:Model::NodePool
blocks	Model\NodePool.h	/^    unordered_map<UuidType, DataBlock *> blocks;$/;"	m	class:Model::NodePool
database	Model\NodePool.h	/^    DatabaseController *database;$/;"	m	class:Model::NodePool
nodes	Model\NodePool.h	/^    LogicalNode *nodes[BlockSize];$/;"	m	class:Model::DataBlock
noexcept	Model\NodePool.h	/^    DatabaseController *getDatabaseController() const noexcept;$/;"	m	class:Model::NodePool
noexcept	Model\NodePool.h	/^    UuidType getBlockId(UuidType uuid) const noexcept;$/;"	m	class:Model::NodePool
noexcept	Model\NodePool.h	/^    UuidType size() const noexcept;$/;"	m	class:Model::NodePool
noexcept	Model\NodePool.h	/^    bool exist(UuidType uuid) noexcept;$/;"	m	class:Model::NodePool
size	Model\NodePool.h	/^    UuidType size;$/;"	m	class:Model::DataBlock
total	Model\NodePool.h	/^    UuidType total;$/;"	m	class:Model::NodePool
main	Model\Test-Database\Test.cpp	/^int main() {$/;"	f
main	Model\Test-Network\Test.cpp	/^int main() {$/;"	f
network	Model\Test-Network\Test.cpp	/^Network network;$/;"	v
pool	Model\Test-Network\Test.cpp	/^NodePool pool;$/;"	v
add	Model\Test-NodePool\Test.cpp	/^void add(LogicalNode *p) {$/;"	f
main	Model\Test-NodePool\Test.cpp	/^int main() {$/;"	f
output	Model\Test-NodePool\Test.cpp	/^void output() {$/;"	f
pool	Model\Test-NodePool\Test.cpp	/^NodePool pool;$/;"	v
vec	Model\Test-NodePool\Test.cpp	/^vector<LogicalNode *> vec;$/;"	v
main	Model\Test-Nodes\Test.cpp	/^int main() {$/;"	f
InputBox	View\InputBox.cpp	/^InputBox::InputBox(string t) : text(t) {$/;"	f	class:View::InputBox
View	View\InputBox.cpp	/^namespace View {$/;"	n	file:
input	View\InputBox.cpp	/^string InputBox::input() {$/;"	f	class:View::InputBox
setText	View\InputBox.cpp	/^void InputBox::setText(string t) {$/;"	f	class:View::InputBox
~InputBox	View\InputBox.cpp	/^InputBox::~InputBox() {$/;"	f	class:View::InputBox
INPUTBOX_H	View\InputBox.h	2;"	d
InputBox	View\InputBox.h	/^class InputBox {$/;"	c	namespace:View
View	View\InputBox.h	/^namespace View {$/;"	n
text	View\InputBox.h	/^    string text;$/;"	m	class:View::InputBox
Menu	View\Menu.cpp	/^Menu::Menu() {$/;"	f	class:View::Menu
View	View\Menu.cpp	/^namespace View {$/;"	n	file:
addItem	View\Menu.cpp	/^void Menu::addItem(string item) {$/;"	f	class:View::Menu
setTitle	View\Menu.cpp	/^void Menu::setTitle(string ti) {$/;"	f	class:View::Menu
show	View\Menu.cpp	/^MenuResult Menu::show() {$/;"	f	class:View::Menu
~Menu	View\Menu.cpp	/^Menu::~Menu() {$/;"	f	class:View::Menu
MENU_H	View\Menu.h	2;"	d
Menu	View\Menu.h	/^class Menu {$/;"	c	namespace:View
MenuResult	View\Menu.h	/^struct MenuResult {$/;"	s	namespace:View
View	View\Menu.h	/^namespace View {$/;"	n
id	View\Menu.h	/^    int id;$/;"	m	struct:View::MenuResult
item	View\Menu.h	/^    string item;$/;"	m	struct:View::MenuResult
items	View\Menu.h	/^    vector<string> items;$/;"	m	class:View::Menu
title	View\Menu.h	/^    string title;$/;"	m	class:View::Menu
main	View\Test-InputBox\Test.cpp	/^int main() {$/;"	f
text	View\Test-InputBox\Test.cpp	/^string text;$/;"	v
main	View\Test-Menu\Test.cpp	/^int main() {$/;"	f
main	View\Test-UserInterface\Test.cpp	/^int main() {$/;"	f
UserInterface	View\UserInterface.cpp	/^UserInterface::UserInterface() {$/;"	f	class:View::UserInterface
View	View\UserInterface.cpp	/^namespace View {$/;"	n	file:
again	View\UserInterface.cpp	/^MenuResult UserInterface::again() {$/;"	f	class:View::UserInterface
ask	View\UserInterface.cpp	/^MenuResult UserInterface::ask(string question) {$/;"	f	class:View::UserInterface
cheer	View\UserInterface.cpp	/^void UserInterface::cheer() {$/;"	f	class:View::UserInterface
confirm	View\UserInterface.cpp	/^MenuResult UserInterface::confirm(string answer) {$/;"	f	class:View::UserInterface
introduce	View\UserInterface.cpp	/^void UserInterface::introduce() {$/;"	f	class:View::UserInterface
learn	View\UserInterface.cpp	/^LearningResult UserInterface::learn(string answer) {$/;"	f	class:View::UserInterface
quit	View\UserInterface.cpp	/^void UserInterface::quit() {$/;"	f	class:View::UserInterface
start	View\UserInterface.cpp	/^void UserInterface::start() {$/;"	f	class:View::UserInterface
~UserInterface	View\UserInterface.cpp	/^UserInterface::~UserInterface() {$/;"	f	class:View::UserInterface
LearningResult	View\UserInterface.h	/^struct LearningResult {$/;"	s	namespace:View
USERINTERFACE_H	View\UserInterface.h	2;"	d
UserInterface	View\UserInterface.h	/^class UserInterface {$/;"	c	namespace:View
View	View\UserInterface.h	/^namespace View {$/;"	n
answer	View\UserInterface.h	/^    string answer;$/;"	m	struct:View::LearningResult
branch	View\UserInterface.h	/^    MenuResult branch;$/;"	m	struct:View::LearningResult
question	View\UserInterface.h	/^    string question;$/;"	m	struct:View::LearningResult
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
